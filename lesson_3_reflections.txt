When would you want to use a remote repository rather than keeping all your work
local?

    A remote repo (such as one hosted on a service like Github) is useful for keep store of your projects online, so that you can access the project files on a different machine, anywhere in the world. It is also useful to use a remote repo when collaborating so team members have a central place to push and pull changes to a project.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Manual pulling of changes allows for predictable working environment. When working on a project, if new changes to a remote repo were automatically pulled to local, you could have unforeseen changes reflected in a portion of a project that you are working on. This could lead to confusing and unpredictable results.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forking a GitHub repo is taking an existing repo and creating a copy of that repo to your own Github account. Think of it as a copy of a repo that gives credit to the original author.

    A clone is creating a copy of a repo that does not maintain any connection to the original repo (if cloning from another users Github account). If you have a repo on your personal account that you want to edit locally, you would use git clone to create a local copy of the repo. You can make your edits, create commits, and push the commits to the repo using git push origin master (or whatever branch you are currently working on). When cloning a repo to local, Git will automatically create a remote path.

    A branch is contained within a project, and represents a set of changes/commits to a project that can be grouped into a single line of thought. For example, a new feature, bug fix, etc. The changes of a particular branch and be later merged into the production branch, and the production branch and can also be merged into the other branch, so that the branch will have the latest production codebase.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    A copy of the last known state stored locally allows the user to see the latest production code, so that when working on their particular branch, they will have access to any additions/removals of code that may be relevant to their current work.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Without Github/Git, collaboration would involve emails and a cloud sharing service such as dropbox. Iterations would go back and forth until the desired results are achieved. Although there is a learning curve, it seems like Git would allow for much better tracking, accountability, and error handling than traditional methods.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Changes should be made in a separate branch when collaborating with other developers. Once a feature set is thought to be complete, a pull request can be submitted. Other team members can see the request, review the changes, comment/resolve any merge issues, and make sure that everything is being kept track of every step of the way. There are a few more steps required in order to make this work but its a systematic way to ensure clear and thorough documentation.
